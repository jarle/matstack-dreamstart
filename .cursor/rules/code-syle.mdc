---
description: Application code style
globs: resources/remix_app/**/*
---

# Code Style Guidelines

## TypeScript Usage

- The code base is in typescript and should be end-to-end type safe. Some local imports use `.js`, but the file extension in the file system is actually `.ts` (this is a typescript quirk.)
- **Trust TypeScript's inference** - avoid explicit type annotations when possible:
  - Do not introduce additional types or interfaces just to fix lint errors - they need a functional reason to exist
  - **Avoid type assertions** with `as` - they bypass TypeScript's type checking and can introduce errors
  - Let TypeScript infer object shapes, function return types, and variable types
  - For generic functions like `make()`, let the return type be inferred from how the result is used
- When the compiler complains about types, look for a way to properly model the data flow rather than overriding the type checker

## Function Parameters

- Methods accept an object `props` or similar so it's possible to use named parameters. The type for the prop object should be inlined in the method signature.
- Use destructuring to access properties directly in function parameters

## Code Organization

- Keep related functions together
- Prefer small, focused components and functions
- Use composition instead of inheritance
