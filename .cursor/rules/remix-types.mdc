---
description: Remix route types usage and conventions
globs: **/*.tsx, **/+types/**
---

# Remix Route Types Usage

## Route Parameter Naming Conventions

- Route parameters must start with the prefix character `$` directly (e.g., `$id`, `$userId`)
- Do NOT use quotes around parameter names in file paths (e.g., use `todos.$id.tsx`, NOT `todos.'$id'.tsx`)
- Incorrect parameter naming will cause the route generation and typegen to fail

## Autogenerated `+types` Patterns

- React Router/Remix automatically generates types for routes in the `+types` directory.
- These types should be imported using the exact path format matching the route file.
- For routes with parameters, use the correct syntax in imports:
  - For routes like `todos.$id.toggle.tsx`, import from `'./+types/todos.$id.toggle.js'`

## Correct Type Imports

- Always include the `.js` extension when importing types, even though the actual file has a `.ts` extension
- Example pattern:
  ```ts
  import { Route } from './+types/[route-name].js'
  
  export async function loader({ params, context }: Route.LoaderArgs) {
    // loader implementation
  }
  
  export async function action({ params, context, request }: Route.ActionArgs) {
    // action implementation
  }
  ```

## Regenerating Types

- If the types appear to be missing, run `npx react-router typegen` to regenerate them
- If typegen fails with errors about route params, check your route file naming conventions
- Make sure all routes follow the same consistent pattern for parameter handling 