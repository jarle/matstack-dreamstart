---
description: Rules for organizing routes in Remix using the Flat Routes convention
globs: resources/remix_app/routes/**/*
alwaysApply: false
---
- We use the flat-routes convention from `@kiliman/remix-flat-routes` to organize our routes.

## File Naming Conventions

We use the hybrid routes approach with the `+` suffix for directories:

- Route directories: `section+/` for directories that should be treated as flat files
  - Example: `api+/endpoint.tsx` → `/api/endpoint`
  - Files within these directories use the parent directory name as prefix
  - `api+/_index.tsx` -> `/api`
- Directories without `+`: `_route.tsx` becomes the route, for example `api/_route.tsx` -> `/api`

## Practical Examples

- **Nested route**: `api+/endpoint.tsx` → `/api/endpoint`
- **Pathless nested folder**: `_auth+/route.tsx` -> `/route`
- **Dynamic Parameters**: `resources+/$resourceId.tsx` → `/resources/:resourceId`
- **Resource Routes**: `thumbnails+/$videoId[.jpg].tsx` → `/thumbnails/:videoId.jpg`
- **Multiple Layout Nesting**: `_auth+/admin+/settings.tsx` → `/admin/settings`
- **Layout**: `endpoint+/_layout.tsx` -> Creates a layout for any other paths inside the `endpoint+` folder. Render children with `<Outlet />`

## Best Practices

1. **Colocation**: Keep related files together in directories with the `+` suffix
2. **Naming Consistency**: Use descriptive names that reflect the route's purpose as it becomes part of the URL
3. **Pathless Layouts**: Use `_` prefix for layout routes that shouldn't create URL segments
4. **Resource Files**: Use square brackets `[]` to denote routes that serve non-HTML resources
