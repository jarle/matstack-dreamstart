---
description: React best practices and patterns
globs: **/*.tsx, **/*.jsx, **/*.ts
---

# React Best Practices

## Key Props in List Rendering

When rendering lists in React, always provide a unique "key" prop to each child element:

1. **Use explicit string keys**: Prefix the ID with a descriptive string to ensure uniqueness:
   ```jsx
   {items.map((item) => {
     const itemKey = `item-${item.id}`;
     return <Component key={itemKey} id={item.id} />;
   })}
   ```

2. **Avoid using array index as keys** unless the list is static and will never be reordered:
   ```jsx
   // Only for static lists that won't change:
   {staticItems.map((item, index) => (
     <Component key={`static-item-${index}`} />
   ))}
   ```

3. **Use block syntax for map functions** to make key handling more explicit:
   ```jsx
   {items.map((item) => {
     // Additional processing can happen here
     return <Component key={item.id} {...item} />;
   })}
   ```

4. **Key format for skeleton/loading components**: When rendering placeholder items (like skeletons), use a consistent pattern:
   ```jsx
   {[...Array(3)].map((_, i) => (
     <Skeleton key={`skeleton-item-${i}`} />
   ))}
   ```

Using proper key props helps React identify which items have changed, been added, or been removed, which significantly improves rendering performance and prevents UI glitches during updates. 